{"version":3,"sources":["icons/dustbin.png","components/list-item/list-item.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","List","onClickIcon","setUpdate","className","duration","easing","map","item","key","type","value","text","onChange","event","target","src","dustbin","alt","onClick","App","props","removeItem","filteredItems","state","items","filter","setState","handleChange","currentItem","Date","now","addItem","preventDefault","concat","id","onSubmit","this","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,qC,sPC+B5BC,EA1BE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,UAAtB,OACf,yBAAKC,UAAU,kBACb,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC7BL,EAAKM,KAAI,SAACC,GAAD,OACR,yBAAKC,IAAKD,EAAKC,IAAKL,UAAU,QAC5B,uBAAGA,UAAU,aACX,2BACEA,UAAU,OACVM,KAAK,OACLC,MAAOH,EAAKI,KACZC,SAAU,SAACC,GAAD,OAAWX,EAAUW,EAAMC,OAAOJ,MAAOH,EAAKC,QAE1D,0BAAML,UAAU,SACd,yBACEY,IAAKC,IACLC,IAAI,UACJC,QAAS,kBAAMjB,EAAYM,EAAKC,iBCuDjCW,E,kDAtEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,WAAa,SAACb,GACZ,IAAMc,EAAgB,EAAKC,MAAMC,MAAMC,QAAO,SAAClB,GAAD,OAAUA,EAAKC,MAAQA,KACrE,EAAKkB,SAAL,eAAmB,EAAKH,MAAxB,CAA+BC,MAAOF,MAbrB,EAenBK,aAAe,SAACd,GACd,EAAKa,SAAL,eACK,EAAKH,MADV,CAEEK,YAAa,CAAEjB,KAAME,EAAMC,OAAOJ,MAAOF,IAAKqB,KAAKC,WAlBpC,EAsBnBC,QAAU,SAAClB,GACTA,EAAMmB,iBAC8B,KAAhC,EAAKT,MAAMK,YAAYjB,MACzB,EAAKe,SAAS,CACZF,MAAO,EAAKD,MAAMC,MAAMS,OAAO,EAAKV,MAAMK,aAC1CA,YAAa,CACXjB,KAAM,GACNH,IAAK,OA7BM,EAmCnBN,UAAY,SAACS,EAAMH,GACjB,IAAMgB,EAAQ,EAAKD,MAAMC,MACzBA,EAAMlB,KAAI,SAACC,GACLA,EAAKC,MAAQA,IACfD,EAAKI,KAAOA,MAGhB,EAAKe,SAAL,eAAmB,EAAKH,MAAxB,CAA+BC,MAAOA,MAxCtC,EAAKD,MAAQ,CACXC,MAAO,GACPI,YAAa,CACXjB,KAAM,GACNH,IAAK,KANQ,E,qDA6CjB,OACE,gCACE,yBAAKL,UAAU,kBACb,0BAAM+B,GAAG,YAAYC,SAAUC,KAAKL,SAClC,2BACE5B,UAAU,aACVkC,YAAY,aACZ3B,MAAO0B,KAAKb,MAAMK,YAAYjB,KAC9BC,SAAUwB,KAAKT,eAEjB,4BAAQxB,UAAU,kBAAkBM,KAAK,UAAzC,OAGA,kBAAC,EAAD,CACET,KAAMoC,KAAKb,MAAMC,MACjBvB,YAAamC,KAAKf,WAClBnB,UAAWkC,KAAKlC,mB,GA9DZoC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4f585c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dustbin.4e4cb92a.png\";","import React from \"react\";\nimport \"./list-item.styles.css\";\nimport dustbin from \"../../icons/dustbin.png\";\nimport FlipMove from \"react-flip-move\";\n\nconst ListItem = ({ List, onClickIcon, setUpdate }) => (\n  <div className=\"item-container\">\n    <FlipMove duration={200} easing=\"ease-in-out\">\n      {List.map((item) => (\n        <div key={item.key} className=\"item\">\n          <p className=\"list-item\">\n            <input\n              className=\"todo\"\n              type=\"text\"\n              value={item.text}\n              onChange={(event) => setUpdate(event.target.value, item.key)}\n            />\n            <span className=\"trash\">\n              <img\n                src={dustbin}\n                alt=\"dustbin\"\n                onClick={() => onClickIcon(item.key)}\n              />\n            </span>\n          </p>\n        </div>\n      ))}\n    </FlipMove>\n  </div>\n);\n\nexport default ListItem;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./components/list-item/list-item.component\";\nimport ListItem from \"./components/list-item/list-item.component\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n  }\n\n  removeItem = (key) => {\n    const filteredItems = this.state.items.filter((item) => item.key !== key);\n    this.setState({ ...this.state, items: filteredItems });\n  };\n  handleChange = (event) => {\n    this.setState({\n      ...this.state,\n      currentItem: { text: event.target.value, key: Date.now() },\n    });\n  };\n\n  addItem = (event) => {\n    event.preventDefault();\n    if (this.state.currentItem.text !== \"\") {\n      this.setState({\n        items: this.state.items.concat(this.state.currentItem),\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  };\n\n  setUpdate = (text, key) => {\n    const items = this.state.items;\n    items.map((item) => {\n      if (item.key === key) {\n        item.text = text;\n      }\n    });\n    this.setState({ ...this.state, items: items });\n  };\n  render() {\n    return (\n      <header>\n        <div className=\"todo-container\">\n          <form id=\"todo-form\" onSubmit={this.addItem}>\n            <input\n              className=\"todo-input\"\n              placeholder=\"Enter Text\"\n              value={this.state.currentItem.text}\n              onChange={this.handleChange}\n            />\n            <button className=\"add-todo-button\" type=\"submit\">\n              Add\n            </button>\n            <ListItem\n              List={this.state.items}\n              onClickIcon={this.removeItem}\n              setUpdate={this.setUpdate}\n            />\n          </form>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}